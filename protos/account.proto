/**
   * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
   * SCOW is licensed under Mulan PSL v2.
   * You can use this software according to the terms and conditions of the Mulan PSL v2.
   * You may obtain a copy of Mulan PSL v2 at:
   *          http://license.coscl.org.cn/MulanPSL2
   * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
   * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
   * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
   * See the Mulan PSL v2 for more details.
*/

syntax = "proto3";

package scow.scheduler_adapter;

message ListAccountsRequest {
  string user_id = 1;
}

message ListAccountsResponse {
  repeated string accounts = 1;
}

message CreateAccountRequest {
  string account_name = 1;
  string owner_user_id = 2;
}

message CreateAccountResponse {
}

message BlockAccountRequest {
  string account_name = 1;
  // when the value exists: block specified partition(s) of the account
  // when the value is [] or undefined: block the account in all partitions
  repeated string blocked_partitions = 2;
}

message BlockAccountResponse {
}

message UnblockAccountRequest {
  string account_name = 1;
  // specify the available partition(s) when executing unblock
  // when the value is [] or undefined: use all partitions
  repeated string unblocked_partitions = 2;
}

message UnblockAccountResponse {
}

message AccountStatusInPartition {
  string partition  = 1;
  bool blocked = 2;
}

message ClusterAccountInfo {
  message UserInAccount {
    string user_id = 1;
    string user_name = 2;
    bool blocked = 3;
  }
  string account_name = 1;
  repeated UserInAccount users = 2;
  optional string owner = 3;
  // return the overall blocked_status in all partitions
  // false: when the queried account has one or more available partitions
  // true: when the queried account has no available partitions
  bool blocked = 4;
  // the details of account blocked status in every partition
  repeated AccountStatusInPartition account_blocked_details = 5;
}

message GetAllAccountsWithUsersRequest {

}

message GetAllAccountsWithUsersResponse {
  repeated ClusterAccountInfo accounts = 1;
}

message QueryAccountBlockStatusRequest {
  string account_name = 1;
  // query in specified partition(s)
  // when the value is [] or undefined, return all partitions blocked details
  repeated string queried_partitions = 2;
}

message QueryAccountBlockStatusResponse {
  // return the overall blocked_status in all partitions
  // false: when the queried account has on or more available partitions
  // true: when the queried account has no available partitions
  bool blocked = 1;
  // the details of account blocked status in every partition
  repeated AccountStatusInPartition account_blocked_details = 2;
}

message FailedResult {
  string failed_account_name = 1;
  repeated string failed_partitions = 2;
  string failed_reason = 3;
}

message AssignedPartitions {
  // when the value exists: excute with specified partition(s) of the account
  // when the value is [] or undefined: means all partitions
  repeated string assigned_partitions = 1;
}

message BlockAccountsRequest {
  map<string, AssignedPartitions> account_partitions_list = 1;
}

message BlockAccountsResponse {
  // when the value is [], means all accounts successfully blocked
  repeated FailedResult failed_results = 1;
}

message UnblockAccountsRequest {
  map<string, AssignedPartitions> account_partitions_list = 1;
}

message UnblockAccountsResponse {
  // when the value is [], means all accounts successfully unblocked
  repeated FailedResult failed_results = 1;
}



service AccountService {
  
  /**
   * description: list accounts for a user
   * errors: 
   * - user not exist
   *   NOT_FOUND, USER_NOT_FOUND, {}
   */
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

  /*
   * description: create account and specify owner
   * errors:
   * - account exist
   *   ALREADY_EXISTS, ACCOUNT_ALREADY_EXISTS, {}
   * - owner id not exist
   *   NOT_FOUND, USER_NOT_FOUND, {} 
   */
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);

  /*
   * description: block an account 
   * errors: 
   * - account not exist
   *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
   * special case:
   * 
   */
  rpc BlockAccount(BlockAccountRequest) returns (BlockAccountResponse);

  /*
   * description: unblock an account 
   * errors: 
   * - account not exist
   *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
   */
  rpc UnblockAccount(UnblockAccountRequest) returns (UnblockAccountResponse);

  /*
   * description: get all accounts and all associated users
   * special case:
   * - account no users, exclude this account
   */
  rpc GetAllAccountsWithUsers(GetAllAccountsWithUsersRequest) returns (GetAllAccountsWithUsersResponse);

  /*
   * description: query if an account is blocked
   * errors: 
   * - account not exist
   *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
   */
  rpc QueryAccountBlockStatus(QueryAccountBlockStatusRequest) returns (QueryAccountBlockStatusResponse);

  /*
   * description: block accounts at one time
   * special case:
   * - block failed accounts and reasons and partitions return in failed_results
   */
  rpc BlockAccounts(BlockAccountsRequest) returns (BlockAccountsResponse);

  /*
   * description: unblock accounts at one time
   * special case:
   * - unblock failed accounts and partitions reasons return in failed_results
   */
  rpc UnblockAccounts(UnblockAccountsRequest) returns (UnblockAccountsResponse);

}
