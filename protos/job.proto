/**
   * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
   * SCOW is licensed under Mulan PSL v2.
   * You can use this software according to the terms and conditions of the Mulan PSL v2.
   * You may obtain a copy of Mulan PSL v2 at:
   *          http://license.coscl.org.cn/MulanPSL2
   * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
   * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
   * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
   * See the Mulan PSL v2 for more details.
*/

syntax = "proto3";

package scheduler.adapter;

import "google/protobuf/timestamp.proto";

enum JobState {
  PENDING = 0;
  RUNNING = 1;
  SUSPENDED = 2;
  COMPLETED = 3;
  CANCELLED = 4;
}
message RunningJob {
  string job_id = 1;
  string partition = 2;
  string name = 3;
  string user = 4;
  JobState state = 5;

  // format in "days-hours:minutes:seconds"
  string running_time = 6;

  /*
   Number of nodes allocated to the job
   or the minimum number of nodes required by a pending job
   */
  uint32 nodes = 7;

  /*
   For pending jobs: the reason a job is waiting for execution. 
   For terminated jobs with failure: an explanation as to why the job failed. 
   For all other job states: the list of allocate nodes.
   */
  string nodes_or_reason = 8;

  string account = 9;
  
  /* 
   Number of CPUs (processors) requested by the job 
   or allocated to it if already running.
  */ 
  uint32 cores = 10;

  string qos = 11;
  google.protobuf.Timestamp submission_time = 12;

  // For pending jobs, a list of the nodes expected to be used when the job is started
  string nodes_to_be_used = 13;

  /*
   format in days-hours:minutes:seconds.
   The value may be "UNLIMITED" for no limit.
   */
  string time_limit = 14;

  string working_dir = 15;
}

message JobTemplate {
  string job_name = 1;
  string account = 2;
  optional string partition = 3;
  optional string qos = 4;
  uint32 node_count = 5;
  uint32 core_count = 6;
  uint32 max_time = 7; // in minutes
  string command = 8;
  string working_directory = 9;
  optional string comment = 10;
}

message JobInfo {
  uint32 job_id = 1;
  string name = 2;
  string account = 3;
  string partition = 4;
  string qos = 5;
  string state = 6;
  string working_directory = 7;
  string reason = 8;
  string elapsed = 9;
  string time_limit = 10;
  string submit_time = 11;
}

message GetRunningJobsRequest {
  optional string user_id = 1;
  repeated string account_names = 2;
  repeated string job_id_list = 3;
}

message GetRunningJobsResponse {
  repeated RunningJob jobs = 1;
}

message ChangeJobTimeLimitRequest {
  string job_id = 1;
  int64 delta = 2;
}

message ChangeJobTimeLimitResponse {
}

message QueryJobTimeLimitRequest {
  string job_id = 1;
}

message QueryJobTimeLimitResponse {
  uint64 limit = 1;
}

message SubmitJobRequest {
  string user_id = 1;
  JobTemplate job_info = 2;
  string script = 3;
  bool save_as_template = 4;
}

message SubmitJobResponse {
  uint32 job_id = 1;
}

message GenerateJobScriptRequest {
  JobTemplate job_info = 1;
}

message GenerateJobScriptResponse {
  string script = 1;
}

message CancelJobRequest {
  string user_id = 1;
  int32 job_id = 2;
}

message CancelJobResponse {
}

message ListAllJobsInfoRequest{
  string user_id = 1;
  google.protobuf.Timestamp start_time =2;
  google.protobuf.Timestamp end_time =3;
}

message ListAllJobsInfoResponse {
  repeated JobInfo results = 1;
}

service JobService {
  /*
   * description: get running jobs info
   * special case:
   * - not specify user, return all users' jobs
   * - not specify account, return all jobs(regardless of account)
   * - not specify job id, return all jobs
   * - one of accounts not exist, don't throw
   * - one of jobid not exist, don't throw
   * errors: 
   * - user not exist
   *   NOT_FOUND, USER_NOT_FOUND, {}
   */
  rpc GetRunningJobs(GetRunningJobsRequest) returns (GetRunningJobsResponse);

  /*
   * description: change a job's time limit 
   * errors: 
   * - job not found
   *   NOT_FOUND, JOB_NOT_FOUND, {}
   */
  rpc ChangeJobTimeLimit(ChangeJobTimeLimitRequest) returns (ChangeJobTimeLimitResponse);
  rpc QueryJobTimeLimit(QueryJobTimeLimitRequest) returns (QueryJobTimeLimitResponse);
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
  rpc GenerateJobScript(GenerateJobScriptRequest) returns (GenerateJobScriptResponse);
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
  rpc ListAllJobsInfo(ListAllJobsInfoRequest) returns (ListAllJobsInfoResponse);
}
